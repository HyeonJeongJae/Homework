package Ex;
// 객체와 인스턴스라는 말이 나올 때마다 혼동..
// 개념을 잡기위해 다시 공부...


// 객체(Object) 와 인스턴스(instans)
// 객체와 인스턴스는 클래스에 정의된 내용에 따라 생성된 것
// 객체는 모든 인스턴스를 포괄하는 의미
// 인스턴스는 클래스를 통해 생성된 하나의 인스턴스


// 객체(Object)
// 개념 : 소프트웨어 세계에 구현할 대상
//        클래스에 선언된 모양 그대로 생성된 실체


// 특징 : '클래스의 인스턴스라고도 부름
//        객체는 모든 인스턴스를 대표하는 포괄적인 의미를 갖음
//        oop의 관점에서 클래스의 타입으로 선언되었을 때 '객체'라고 부름


//    oop 란 : 객체 지향 프로그래밍(Object-Oriented Programming)
//             프로그래밍 패러다임 중 하나로, 현실 세계의 사물이나 개념을
//             객체로 표현하고, 이러한 객체들 간의 상호작용을 통해 프로그램을
//             구현하는 방법론, 크게 네가지 주요개념으로 구성
//             (캡슐화, 상속, 다형성, 추상화)


// 인스턴스(instans)
// 개념 : 설계도(class)를 바탕으로 소프트웨어 세계에 구현된 구체적인 실체
//        즉, 객체를 소프트웨어에 실체화 하면 그것을 ''인스턴스'라고 부름
//        실체화된 인스턴스는 메모리에 할당됨


// 특징 : 인스턴스는 객체에 포함된다고 볼 수 있음
//        oop의 관점에서 객체가 메모리에 할당되어 실제 사용될 때 '인스턴스'라고 부름
//        추상적인 개념과 구체적인 객체 사이의 관계에 초점을 맞출 경우에 사용
//          '~의 인스턴스'의 형태로 사용
//          객체는 클래스의 인스턴스
//          객체 간의 링크는 클래스 간의 연관 관계의 인스턴스
//          실행 프로세스는 프로그램의 인스턴스
//        즉, 인스턴스라는 용어는 반드시 클래스와 객체 사이의 관계로 한정지어서
//        사용할 필요는 없음
//        인스턴스는 어떤 원본(추상적인 개념)으로부터 '생성된 복제본'을 의미




public class ObjectAndInstans {
}
